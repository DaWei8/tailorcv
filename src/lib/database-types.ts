// src/lib/database.types.ts
// This file is automatically generated by Supabase CLI or manually crafted
// to provide TypeScript types for your database schema.

import { z } from "zod";
import {
  profileSchema,
  experienceSchema,
  educationSchema,
  certSchema,
  langSchema,
  skillSchema,
} from "./schemas"; // Adjust path if necessary
import { ResumeData } from "./resume-data"; // Assuming resume-data.ts exists and defines ResumeData

// Helper types for common database fields
type CommonRowFields = {
  id: string; // UUID
  created_at: string; // ISO timestamp
};

type CommonInsertFields = {
  id?: string; // UUID, often auto-generated
  created_at?: string; // ISO timestamp, often auto-generated
};

// --- Profiles Table ---
// The profile table typically has an 'id' which is the user's auth.uid
export type ProfilesRow = z.infer<typeof profileSchema> & CommonRowFields;
export type ProfilesInsert = z.infer<typeof profileSchema> & CommonInsertFields;
export type ProfilesUpdate = Partial<ProfilesRow>;

// --- Experiences Table ---
export type ExperiencesRow = z.infer<typeof experienceSchema> & CommonRowFields & {
  profile_id: string; // Foreign key to profiles.id
};
export type ExperiencesInsert = z.infer<typeof experienceSchema> & CommonInsertFields & {
  profile_id: string;
};
export type ExperiencesUpdate = Partial<ExperiencesRow>;

// --- Education Table ---
export type EducationRow = z.infer<typeof educationSchema> & CommonRowFields & {
  profile_id: string;
};
export type EducationInsert = z.infer<typeof educationSchema> & CommonInsertFields & {
  profile_id: string;
};
export type EducationUpdate = Partial<EducationRow>;

// --- Certifications Table ---
export type CertificationsRow = z.infer<typeof certSchema> & CommonRowFields & {
  profile_id: string;
};
export type CertificationsInsert = z.infer<typeof certSchema> & CommonInsertFields & {
  profile_id: string;
};
export type CertificationsUpdate = Partial<CertificationsRow>;

// --- Languages Table ---
export type LanguagesRow = z.infer<typeof langSchema> & CommonRowFields & {
  profile_id: string;
};
export type LanguagesInsert = z.infer<typeof langSchema> & CommonInsertFields & {
  profile_id: string;
};
export type LanguagesUpdate = Partial<LanguagesRow>;

// --- Skills Table ---
export type SkillsRow = z.infer<typeof skillSchema> & CommonRowFields & {
  profile_id: string;
};
export type SkillsInsert = z.infer<typeof skillSchema> & CommonInsertFields & {
  profile_id: string;
};
export type SkillsUpdate = Partial<SkillsRow>;

// --- Tailored Resumes Table ---
// This table stores the generated resume data as JSONB
export type TailoredResumesRow = CommonRowFields & {
  profile_id: string;
  resume_jsonb: ResumeData; // Stores the full structured resume data
};
export type TailoredResumesInsert = CommonInsertFields & {
  profile_id: string;
  resume_jsonb: ResumeData;
};
export type TailoredResumesUpdate = Partial<TailoredResumesRow>;


// --- Main Database Type ---
// This is the primary type used by Supabase client
export type Database = {
  public: {
    Tables: {
      profiles: {
        Row: ProfilesRow;
        Insert: ProfilesInsert;
        Update: ProfilesUpdate;
      };
      experiences: {
        Row: ExperiencesRow;
        Insert: ExperiencesInsert;
        Update: ExperiencesUpdate;
      };
      education: {
        Row: EducationRow;
        Insert: EducationInsert;
        Update: EducationUpdate;
      };
      certifications: {
        Row: CertificationsRow;
        Insert: CertificationsInsert;
        Update: CertificationsUpdate;
      };
      languages: {
        Row: LanguagesRow;
        Insert: LanguagesInsert;
        Update: LanguagesUpdate;
      };
      skills: {
        Row: SkillsRow;
        Insert: SkillsInsert;
        Update: SkillsUpdate;
      };
      tailored_resumes: {
        Row: TailoredResumesRow;
        Insert: TailoredResumesInsert;
        Update: TailoredResumesUpdate;
      };
    };
    // Views: {
    //   // You can define database views here if you have any
    // };
    // Functions: {
    //   // You can define database functions here if you have any
    // };
    // Enums: {
    //   // You can define database enums here if you have any
    //   // Example: 'Beginner' | 'Intermediate' | 'Advanced' | 'Native'
    // };
  };
};